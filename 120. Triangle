package main

import(
  "fmt"
)

func main(){
      grid := [][]int{{2},{3,4},{6,5,7},{4,1,8,3}}
	var result int
	result = minimumTotal(grid)
	fmt.Println("%d",result)
}



func minimumTotal(triangle [][]int) int {
    n := len(triangle)
    f := make([][]int, n)

    for i := 0; i < n; i++ {
        f[i] = make([]int, n)
    }
    //side condition
    f[0][0] = triangle[0][0]
    //dp
    for i := 1; i < n; i++ {
        f[i][0] = f[i - 1][0] + triangle[i][0]
        for j := 1; j < i; j++ {
            f[i][j] = min(f[i - 1][j - 1], f[i - 1][j]) + triangle[i][j]
        }
        //when j=i
        f[i][i] = f[i - 1][i - 1] + triangle[i][i]
    }
    result := f[n-1][0]
    for i := 0; i < n; i++ {
        result = min(result, f[n-1][i])
    }
    return result
}

func min(x, y int) int {
    if x < y {
        return x
    }
    return y
}

/*
func minimumTotal(triangle [][]int) int {
	for i:=len(triangle)-2;i>=0;i--{
		for j:=0;j<len(triangle[i]);j++{
			triangle[i][j]+=min(triangle[i+1][j],triangle[i+1][j+1])
		}
	}
	return triangle[0][0]
}
func min(x,y int) int{
	if x<y{
		return x
	}
	return y
}


*/







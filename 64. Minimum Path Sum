package main

import(
  "fmt"
)

func main(){
      grid := [][]int{{1,3,1},{1,5,1},{4,2,1}}
	var result int
	result = minPathSum(grid)
	fmt.Println("%d",result)
}



func minPathSum(grid [][]int) int {
    if len(grid) == 0 || len(grid[0]) == 0 {
        return 0
    }

    //length means line
    length := len(grid)
    columns := len(grid[0])
    
    result := make([][]int, length)
    for i := 0; i <= len(result) - 1; i++ {
        result[i] = make([]int, columns)
     }

    //intial
    result[0][0] = grid[0][0]

    //consider line
    for i := 1; i <= length - 1; i++ {
        result[i][0] = result[i - 1][0] + grid[i][0]
     }

    //consider columns
    for j := 1; j <= columns - 1; j++ {
        result[0][j] = result[0][j - 1] + grid[0][j]
     }

    //cosnsider both
    for i := 1; i <= length - 1; i++ {
        for j := 1; j <= columns - 1; j++ {
            result[i][j] = min(result[i - 1][j], result[i][j - 1]) + grid[i][j]
        }
    }
    return result[length - 1][columns - 1]
}

func min(x, y int) int {
    if x > y {
        return y
    }
    return x
}





package main

import(
  "fmt"
)

func main(){
      //height := []int{0,1,0,2,1,0,1,3,2,1,2,1}
      //height := []int{1,0}
	n := 3
      var result []string
	result = generateParenthesis(n)
	fmt.Println("%s",result)
}

func generateParenthesis(n int) []string {
	result := new([]string)
	generate(0, 0, n, "", result)
	return *result
}

func generate(left int, right int, max int, s string, result *[]string){
	// recursion start-stop condition
	if left == right && right ==  max{
		*result = append(*result, s)
		return
	}

	// recursion
	if right < left{
		generate(left, right+1,  max, s + ")", result)
	}
      if left < max{
		generate(left+1, right, max, s + "(", result)
	}
}

/*
func generateParenthesis(n int) []string {
	result :=new([]string)
      //result := make([]string, 0)
	generate("", 0, 0, n, result)
	return *result
}


func generate(current string, left, right, n int, result *[]string) {
	
      if left == n && right == n {
		*result = append(*result, current)
		return
	}
	if left < n {
		generate(current+"(", left+1, right, n, result)
	}
	if right < left {
		generate(current+")", left, right+1, n, result)
	}
}
*/

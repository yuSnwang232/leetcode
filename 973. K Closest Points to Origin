/**
@kClosest.go
@authorï¼šyuSnwang
@time:2020.9.2
*/
package main
 
import (
"fmt"
"sort"
)
 
func main(){
     points :=  [][]int{{1,3},{-2,2}}
     K := 1
	 var result [][]int
     result = kClosest(points,K) 
     fmt.Println("%d",result)
}


/**
 * kClosest
 *
 * @param [][]int points
 * @param int K
 * @return [][]int
 
 * @private
 */


func kClosest(points [][]int, K int) [][]int {
    
    sort.Slice(points, func(i, j int) bool{
        return float64(points[i][0]*points[i][0] + points[i][1]*points[i][1]) < float64(points[j][0]*points[j][0] + points[j][1]*points[j][1])
    })
    return points[:K]
}

/*
func kClosest(points [][]int, K int) [][]int {
    result := [][]int{}
    kClosestHelper(points,K,&result)
    return result
}

func kClosestHelper(points [][]int, K int,result *[][]int) *[][]int {
    start,end := 0,len(points)-1
    pos := work(points,start,end)
    //pos is the sign 
    //pos < K-1 consider the whole left part of pos and part of points in the right part
    if pos < K-1 {
        *result = append(*result,points[:pos+1]...)
        return kClosestHelper(points[pos+1:],K-pos-1,result)
    }
    //consider the only left part of pos
    if pos > K-1{
        return kClosestHelper(points[:pos],K,result)       
    }
    //else result
    *result = append(*result,points[:pos+1]...)
    return result
}

//part quick sort
func work(nums [][]int, start,end int) int{
    pos,left,right := nums[start],start,end
    for (left < right){
        for (distance(nums[right]) >= distance(pos) && left<right) {
            right--
        }
        for (distance(nums[left]) <= distance(pos) && left<right) {
            left++
        }
        nums[left],nums[right] = nums[right],nums[left]
    }
    nums[start],nums[left] = nums[left],nums[start]
    return left
}

//calculate
func distance(num []int)int{
    return num[0] * num[0] + num[1] * num[1]
}

*/

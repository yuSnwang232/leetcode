package main
 
import "fmt"
 
func quickSort(nums []int, left int, right int) {
    if left >= right {  
        return
    }
    temp := nums[left]
    start := left
    stop := right
    for right != left {
        for right > left && nums[right] >= temp  {
            right --
        }
        for left < right && nums[left] <= temp  {
            left ++
        }
        if right > left {
            nums[right], nums[left] = nums[left], nums[right]
        }
    }
    nums[right], nums[start] = temp, nums[right]
    quickSort(nums, right+1, stop)
	quickSort(nums, start, left)
    
}

func intersect(nums1 []int, nums2 []int) []int {
    quickSort(nums1, 0, len(nums1)-1)
	quickSort(nums2, 0, len(nums2)-1)
    
	index1 := 0
	index2 := 0
	length1 := len(nums1)-1
	length2 := len(nums2)-1
    result := []int{}
    
	for index1 <= length1 && index2 <= length2 {
        if nums1[index1] < nums2[index2] {
            index1++
        } else if nums1[index1] > nums2[index2] {
            index2++
        } else {
            result = append(result, nums1[index1])
            index1++
            index2++
        }
    }
    return result
}


 
func main() {
    nums1 := []int{4,9,5}
	nums2 := []int{9,4,9,8,4}
	var result []int 
    result = intersect(nums1,nums2)
    fmt.Println(result)
}
